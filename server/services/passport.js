const keys = require('../config/keys');
const passport = require("passport");
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const mongoose = require("mongoose");
const User = mongoose.model('users');

// serialize and deserialize is to utilize cookie so that website can handle revisited users
passport.serializeUser((user, done) => {
    // this is not a profile id. user.id is a id generated by mongo
    done(null, user.id);
});

passport.deserializeUser((id,done) => {
    User.findById(id).then(user => {
        done(null, user);
    });
});

passport.use(
    new GoogleStrategy(
    {
        clientID : keys.googleAuth.clientID,
        clientSecret : keys.googleAuth.clientSecret,
        callbackURL : keys.googleAuth.callbackURL
       
    }, 
    async (accessToken,refreshToken, profile, done) => {
            // Line below does not return anything 
            // await/async => The beauty of this approach is that it allows asynchronous code to look more synchronous  
            const existingUser = await User.findOne({ googleId: profile.id});
    
            if (existingUser) {
               return done(null, existingUser);
             }
            const user = await new User({  googleId: profile.id}).save();
            done(null,user);
        }
));

passport.use(new FacebookStrategy({
        clientID: keys.facebookAuth.clientID,
        clientSecret: keys.facebookAuth.clientSecret,
        callbackURL: keys.facebookAuth.callbackURL,
        profileFields: ['id', 'email','displayName']
    },
    async (accessToken, refreshToken, profile, cb) => {
    const existingUser = await User.findOne({ facebookId: profile.id })
    if (existingUser) {
      return cb(null, existingUser);
    }
    const user =  await new User({ facebookId: profile.id }).save();
    console.log('facebookeuser', user)
    cb(null, user);
    }
));

// passport.use(
//     new FacebookStrategy(
//     {
//         clientID : keys.facebookAuth.clientID,
//         clientSecret : keys.facebookAuth.clientSecret,
//         callbackURL : keys.facebookAuth.callbackURL,
//         proxy: true,
//         passReqToCallback: true,
//     },
//     (accessToken, refreshToken, profile, done) => {
//         // Any time we reach out to our database, we are initiating an 
//         // asynchronous action. we can't use const here. 
//         // instad we can give a promise 
//                 console.log(5)

//         User.findOne({ facebookId : profile.id })
//             .then((existingUser) => {
//                 if(existingUser) {
//                     console.log(3)
//                     // we already have a record with a given profile ID
//                     done(null, existingUser);
//                 }
//                 else {
//                     console.log(4)
//                     // we don't have a user record with this ID
//                      // if we do .save() mongoose will save the User to mongodb database
//                     new User({ facebookId: profile.id})
//                         .save()
//                         .then(user => done(null, user));
//                 }
//             });
        
       
//     }
// ))
